{"ast":null,"code":"var _jsxFileName = \"/Users/jonnygold/Code/MVDS/react/my-react-app/src/components/stateManagement/Reducers/TaskApp.js\",\n  _s = $RefreshSig$();\nimport { useReducer } from 'react';\nimport AddTask from './AddTask.js';\nimport TaskList from './TaskList.js';\nimport tasksReducer from './tasksReducer.js';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function TaskApp() {\n  _s();\n  const [tasks, dispatch] = useReducer(tasksReducer, initialTasks);\n  function handleAddTask(text) {\n    dispatch({\n      type: 'added',\n      id: nextId++,\n      text: text\n    });\n  }\n  function handleChangeTask(task) {\n    dispatch({\n      type: 'changed',\n      task: task\n    });\n  }\n  function handleDeleteTask(taskId) {\n    dispatch({\n      type: 'deleted',\n      id: taskId\n    });\n  }\n  function list(tasks) {\n    return tasks.map(task => /*#__PURE__*/_jsxDEV(\"li\", {\n      children: \"JSON.stringify(task)\"\n    }, task.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 7\n    }, this));\n  }\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Prague itinerary\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(AddTask, {\n      onAddTask: handleAddTask\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(TaskList, {\n      tasks: tasks,\n      onChangeTask: handleChangeTask,\n      onDeleteTask: handleDeleteTask\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: JSON.stringify(tasks)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n_s(TaskApp, \"/WXoOWA8jcmGw6IJvQ6lpVQrnbs=\");\n_c = TaskApp;\nlet nextId = 3;\nconst initialTasks = [{\n  id: 0,\n  text: 'Visit Kafka Museum',\n  done: true\n}, {\n  id: 1,\n  text: 'Watch a puppet show',\n  done: false\n}, {\n  id: 2,\n  text: 'Lennon Wall pic',\n  done: false\n}];\nvar _c;\n$RefreshReg$(_c, \"TaskApp\");","map":{"version":3,"names":["useReducer","AddTask","TaskList","tasksReducer","jsxDEV","_jsxDEV","Fragment","_Fragment","TaskApp","_s","tasks","dispatch","initialTasks","handleAddTask","text","type","id","nextId","handleChangeTask","task","handleDeleteTask","taskId","list","map","children","fileName","_jsxFileName","lineNumber","columnNumber","onAddTask","onChangeTask","onDeleteTask","JSON","stringify","_c","done","$RefreshReg$"],"sources":["/Users/jonnygold/Code/MVDS/react/my-react-app/src/components/stateManagement/Reducers/TaskApp.js"],"sourcesContent":["import { useReducer } from 'react';\nimport AddTask from './AddTask.js';\nimport TaskList from './TaskList.js';\nimport tasksReducer from './tasksReducer.js';\n\nexport default function TaskApp() {\n  const [tasks, dispatch] = useReducer(tasksReducer, initialTasks);\n\n  function handleAddTask(text) {\n    dispatch({\n      type: 'added',\n      id: nextId++,\n      text: text,\n    });\n  }\n\n  function handleChangeTask(task) {\n    dispatch({\n      type: 'changed',\n      task: task,\n    });\n  }\n\n  function handleDeleteTask(taskId) {\n    dispatch({\n      type: 'deleted',\n      id: taskId,\n    });\n  }\n\n  function list(tasks) {\n    return tasks.map((task) => (\n      <li key={task.id}>\n       JSON.stringify(task)\n      </li>\n    ));\n  }\n\n  return (\n    <>\n      <h1>Prague itinerary</h1>\n      <AddTask onAddTask={handleAddTask} />\n      <TaskList\n        tasks={tasks}\n        onChangeTask={handleChangeTask}\n        onDeleteTask={handleDeleteTask}\n      />\n    \n      <p>{JSON.stringify(tasks)}</p>\n    </>\n  );\n}\n\nlet nextId = 3;\nconst initialTasks = [\n  {id: 0, text: 'Visit Kafka Museum', done: true},\n  {id: 1, text: 'Watch a puppet show', done: false},\n  {id: 2, text: 'Lennon Wall pic', done: false},\n];\n"],"mappings":";;AAAA,SAASA,UAAU,QAAQ,OAAO;AAClC,OAAOC,OAAO,MAAM,cAAc;AAClC,OAAOC,QAAQ,MAAM,eAAe;AACpC,OAAOC,YAAY,MAAM,mBAAmB;AAAC,SAAAC,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA;AAE7C,eAAe,SAASC,OAAOA,CAAA,EAAG;EAAAC,EAAA;EAChC,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGX,UAAU,CAACG,YAAY,EAAES,YAAY,CAAC;EAEhE,SAASC,aAAaA,CAACC,IAAI,EAAE;IAC3BH,QAAQ,CAAC;MACPI,IAAI,EAAE,OAAO;MACbC,EAAE,EAAEC,MAAM,EAAE;MACZH,IAAI,EAAEA;IACR,CAAC,CAAC;EACJ;EAEA,SAASI,gBAAgBA,CAACC,IAAI,EAAE;IAC9BR,QAAQ,CAAC;MACPI,IAAI,EAAE,SAAS;MACfI,IAAI,EAAEA;IACR,CAAC,CAAC;EACJ;EAEA,SAASC,gBAAgBA,CAACC,MAAM,EAAE;IAChCV,QAAQ,CAAC;MACPI,IAAI,EAAE,SAAS;MACfC,EAAE,EAAEK;IACN,CAAC,CAAC;EACJ;EAEA,SAASC,IAAIA,CAACZ,KAAK,EAAE;IACnB,OAAOA,KAAK,CAACa,GAAG,CAAEJ,IAAI,iBACpBd,OAAA;MAAAmB,QAAA,EAAkB;IAElB,GAFSL,IAAI,CAACH,EAAE;MAAAS,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAEZ,CACL,CAAC;EACJ;EAEA,oBACEvB,OAAA,CAAAE,SAAA;IAAAiB,QAAA,gBACEnB,OAAA;MAAAmB,QAAA,EAAI;IAAgB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACzBvB,OAAA,CAACJ,OAAO;MAAC4B,SAAS,EAAEhB;IAAc;MAAAY,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eACrCvB,OAAA,CAACH,QAAQ;MACPQ,KAAK,EAAEA,KAAM;MACboB,YAAY,EAAEZ,gBAAiB;MAC/Ba,YAAY,EAAEX;IAAiB;MAAAK,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAChC,CAAC,eAEFvB,OAAA;MAAAmB,QAAA,EAAIQ,IAAI,CAACC,SAAS,CAACvB,KAAK;IAAC;MAAAe,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC;EAAA,eAC9B,CAAC;AAEP;AAACnB,EAAA,CA9CuBD,OAAO;AAAA0B,EAAA,GAAP1B,OAAO;AAgD/B,IAAIS,MAAM,GAAG,CAAC;AACd,MAAML,YAAY,GAAG,CACnB;EAACI,EAAE,EAAE,CAAC;EAAEF,IAAI,EAAE,oBAAoB;EAAEqB,IAAI,EAAE;AAAI,CAAC,EAC/C;EAACnB,EAAE,EAAE,CAAC;EAAEF,IAAI,EAAE,qBAAqB;EAAEqB,IAAI,EAAE;AAAK,CAAC,EACjD;EAACnB,EAAE,EAAE,CAAC;EAAEF,IAAI,EAAE,iBAAiB;EAAEqB,IAAI,EAAE;AAAK,CAAC,CAC9C;AAAC,IAAAD,EAAA;AAAAE,YAAA,CAAAF,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}